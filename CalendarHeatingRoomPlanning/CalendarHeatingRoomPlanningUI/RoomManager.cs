///////////////////////////////////////////////////////////
//  RoomManager.cs
//  Implementation of the Component Room-Manager
//  Generated by Enterprise Architect
//  Created on:      09-Mai-2021 13:15:01
//  Original author: mkaul
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using CalendarHeatingRoomPlanning;

namespace CalendarHeatingRoomPlanningUI
{
    /// <summary>
    /// Manages the available rooms.
    /// </summary>
    public class RoomManager : IRoomAccess
    {
		/// <summary>
		/// Used for lazy initialization
		/// </summary>
		private static readonly Lazy<RoomManager>
				lazy = new Lazy<RoomManager>(() => new RoomManager());

		/// <summary>
		/// Used to access the singleton
		/// </summary>
		public static RoomManager Instance { get { return lazy.Value; } }
		
		/// <summary>
		/// Rooms that are already specified.
		/// </summary>
		public RoomModel Rooms
		{
			get
            {
				if( !_already_load)
                {
					Load();
					_already_load = true;
				}
				return _rooms;
            }
			set
            {
				_rooms = value;
				Store();
            }
		}
        private RoomModel _rooms;

        /// <summary>
        /// False, the room data is not already load.
        /// </summary>
        private Boolean _already_load;

		/// <summary>
		/// Filename of the file that stores the application settings.
		/// </summary>
		private const string RoomsFileName = "CalendarHeatinRoomPlaningRooms.dat";

		public RoomManager()
        {
            _already_load = false;
            _rooms = new RoomModel();
			_rooms.RoomData = new List<SingleRoom>();
        }

        ~RoomManager()
        {
        }

        /// <summary>
        /// Add a new room to the list of rooms.
        /// </summary>
        /// <param name="room"></param>
        public void AddRoom(SingleRoom room)
        {
			if(!_rooms.RoomData.Contains(room))
            {
				_rooms.RoomData.Add(room);
            }
        }

        /// <summary>
        /// Deletes an already created room from the list of rooms.
        /// </summary>
        /// <param name="room"></param>
        public void DeleteRoom(SingleRoom room)
        {
			if (_rooms.RoomData.Contains(room))
            {
				_rooms.RoomData.Remove(room);
            }
		}

		/// <summary>
		/// Loads the specified rooms from the storage.
		/// </summary>
		public void Load()
		{
			if (System.IO.File.Exists(RoomsFileName))
			{
				// load previous stored settings
				System.IO.TextReader reader = null;
				try
				{
					System.Xml.Serialization.XmlSerializer serializer = new System.Xml.Serialization.XmlSerializer(typeof(RoomModel));
					reader = new System.IO.StreamReader(RoomsFileName);
					_rooms = serializer.Deserialize(reader) as RoomModel;
				}
				finally
				{
					if (reader != null)
					{
						reader.Close();
					}
				}
			}
		}

		/// <summary>
		/// Stores the specified rooms to the storage.
		/// </summary>
		public void Store()
		{
			System.IO.TextWriter writer = null;
			try
			{
				System.Xml.Serialization.XmlSerializer serializer = new System.Xml.Serialization.XmlSerializer(typeof(RoomModel));
				writer = new System.IO.StreamWriter(RoomsFileName);
				serializer.Serialize(writer, _rooms);
			}
			finally
			{
				if (writer != null)
				{
					writer.Close();
				}
			}
		}
	}
}