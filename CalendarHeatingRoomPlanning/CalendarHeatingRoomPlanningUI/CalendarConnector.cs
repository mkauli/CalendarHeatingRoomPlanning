///////////////////////////////////////////////////////////
//  CalendarConnector.cs
//  Implementation of the Component Calendar-Connector
//  Generated by Enterprise Architect
//  Created on:      04-Mai-2021 10:50:02
//  Original author: mkaul
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using CalendarHeatingRoomPlanning;

namespace CalendarHeatingRoomPlanningUI
{
    public class CalendarConnector : SettingsSubscriber, CalendarPublisher
    {
        /// <summary>
        /// Used for lazy initialization
        /// </summary>
        private static readonly Lazy<CalendarConnector>
                lazy = new Lazy<CalendarConnector>(() => new CalendarConnector());

        /// <summary>
        /// Used to access the singleton
        /// </summary>
        public static CalendarConnector Instance { get { return lazy.Value; } }

        /// <summary>
        /// Destination of all calendar data read from the URL
        /// </summary>
        public Ical.Net.Calendar Calendar { get; set; }

        /// <summary>
        /// URL to the calendar webcal site - will be updated by the SettingsManager via its publisher feature.
        /// </summary>
        private string _ical_url;

        /// <summary>
        /// List of currently registered subscribers. At notify all these subscribers will be called via their Update() operation.
        /// </summary>
        private List<CalendarSubscriber> Subscribers { get; set; }

        public CalendarDataModel Data 
        {
            get { return _data; }
            set { _data = value;  }
        }
        private CalendarDataModel _data;

        private CalendarConnector()
        {
            Subscribers = new List<CalendarSubscriber>();
            _data = new CalendarDataModel();
            _data.EventData = new List<SingleEvent>();

            SettingsManager.Instance.Attach(this);
            _ical_url = SettingsManager.Instance.Settings.Calendar.ICalUrl;
        }

        ~CalendarConnector()
        {
            SettingsManager.Instance.Detach(this);
        }

        /// <summary>
        /// Registers new subscriber to the list of subscribers - when notify is called
        /// then all currently registered subscribers are called.
        /// </summary>
        /// <param name="subscriber"></param>
        public void Attach(CalendarSubscriber subscriber)
        {
            if (!Subscribers.Contains(subscriber))
            {
                Subscribers.Add(subscriber);
            }
        }

        /// <summary>
        /// Removes the subscriber from the list of subscribers - when notify is called
        /// then all currently registered subscribers are called.
        /// </summary>
        /// <param name="subscriber"></param>
        public void Detach(CalendarSubscriber subscriber)
        {
            if (Subscribers.Contains(subscriber))
            {
                Subscribers.Remove(subscriber);
            }
        }

        /// <summary>
        /// For all registered subscribers their Update() operation is called - used to
        /// notify the subscribers. This notify will be published to the subscribers when
        /// calendar data was fetched.
        /// </summary>
        public void Notify()
        {
			foreach(CalendarSubscriber subscriber in Subscribers)
            {
				subscriber.Update(this);
            }
        }

        /// <summary>
        /// This operation will be called when the publisher notifies new setting data.
        /// </summary>
        /// <param name="publisher"></param>
        public void Update(SettingsPublisher publisher)
        {
            _ical_url = SettingsManager.Instance.Settings.Calendar.ICalUrl;
        }

        /// <summary>
        /// Reads the calendar data from the via settings manager specified iCal WebSite.
        /// </summary>
        public void FetchCalendarData()
        {
            try
            {
                if(Calendar != null)
                {
                    Calendar = null;
                }

                // load data from webcal URl
                System.Net.WebClient client = new System.Net.WebClient();
                // validate url
                if ((_ical_url.Length > 0) && (_ical_url.ToLower().StartsWith("http")))
                {
                    System.IO.Stream stream = client.OpenRead(_ical_url);
                    // System.IO.FileStream stream = new System.IO.FileStream("C:\\Temp\\calendar.ics", System.IO.FileMode.Open, System.IO.FileAccess.Read);
                    System.IO.StreamReader reader = new System.IO.StreamReader(stream);
                    string iCalData = reader.ReadToEnd();
                    string iCalDataNoComments = "";

                    // remove comment -> not processed by ical library
                    using (var iCalDataReader = new System.IO.StringReader(iCalData))
                    {
                        for (string line = iCalDataReader.ReadLine(); line != null; line = iCalDataReader.ReadLine())
                        {
                            if (line.Length == 0) continue;
                            if (line[0] != '/')
                            {
                                iCalDataNoComments += line + System.Environment.NewLine;
                            }
                        }
                    }
                    // let parse data from ical calendar            
                    Calendar = Ical.Net.Calendar.Load(iCalDataNoComments);

                    //foreach (ical.net.calendarcomponents.calendarevent cal in calendar.children)
                    //{
                    //    data.add("test");
                    //}
                }

                // process new data
                ConvertICalDataToDataModel();

                // publish new data
                Notify();
            }
            finally
            {
            }
        }

        /// <summary>
        /// Uses the iCal calendar event info of the property Calendar and transfers it to the CalendarDataModel.
        /// </summary>
        private void ConvertICalDataToDataModel()
        {
            _data.EventData.Clear();

            if((Calendar == null) || (Calendar.Children.Count == 0))
            {
                // no calendar event in iCal found
                return;
            }

            // process found iCal events
            foreach(Ical.Net.CalendarComponents.CalendarEvent calEvent in Calendar.Children)
            {
                if (!calEvent.IsActive) continue;
                SingleEvent singleEvent = new SingleEvent();
                // process dates
                singleEvent.DayEvent = false;
                singleEvent.DayEventSpecified = true;
                if (calEvent.IsAllDay)
                {
                    singleEvent.DayEvent = true;
                    singleEvent.Start = calEvent.Start.Date;
                    // one-day AllDays event need to be corrected
                    if(calEvent.Duration.TotalDays == -1)
                    {
                        // correct bug that one-day AllDay events the stop date is one day before start date.
                        singleEvent.Stop = calEvent.End.Date;
                        singleEvent.Stop = singleEvent.Stop.AddDays(1);
                    }
                    if (calEvent.Duration.TotalDays > 0)
                    {
                        // correct bug that multiple-day AllDay events the stop date is one day after start date.
                        singleEvent.Stop = calEvent.End.Date;
                        singleEvent.Stop = singleEvent.Stop.AddDays(-1);
                    }
                }
                else
                {
                    singleEvent.Start = calEvent.Start.Value;
                    singleEvent.Stop = calEvent.End.Value;
                }
                // process description
                singleEvent.Description = calEvent.Summary;
                // process specified fields
                singleEvent.StartSpecified = true;
                singleEvent.StopSpecified = true;

                Data.EventData.Add(singleEvent);
            }
        }
    }
}