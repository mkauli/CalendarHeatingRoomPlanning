///////////////////////////////////////////////////////////
//  Settings-Manager.cs
//  Implementation of the Component Settings-Manager
//  Generated by Enterprise Architect
//  Created on:      03-Mai-2021 19:20:19
//  Original author: mkaul
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using CalendarHeatingRoomPlanning;

namespace CalendarHeatingRoomPlanningUI
{
	/// <summary>
	/// Manages the current application settings.
	/// </summary>
	public sealed class SettingsManager : SettingsPublisher 
	{
        /// <summary>
        /// Used for lazy initialization
        /// </summary>
        private static readonly Lazy<SettingsManager>
                lazy = new Lazy<SettingsManager>(() => new SettingsManager());

        /// <summary>
        /// Used to access the singleton
        /// </summary>
        public static SettingsManager Instance { get { return lazy.Value; } }

        /// <summary>
        /// Filename of the file that stores the application settings.
        /// </summary>
        private const string SettingsFileName = "CalendarHeatinRoomPlaning.dat";

		/// <summary>
		/// List of currently registered subscribers. At notify all these subscribers will be called via their Update() operation.
		/// </summary>
		private List<SettingsSubscriber> Subscribers { get; set; }

		/// <summary>
		/// Application Settings that the user can change/modify
		/// </summary>
		public ApplicationSettings Settings 
		{
			get
            {
				if( !_already_load)
                {
					Load();
					_already_load = true;
				}
				return _settings;
            }
			set
            {
				_settings = value;
				Notify();
            }
		}
		private ApplicationSettings _settings;
		private Boolean _already_load;

		private SettingsManager()
		{
			Subscribers = new List<SettingsSubscriber>();

			_already_load = false;
			_settings = new ApplicationSettings();
			_settings.Calendar = new CalendarProperties();
			_settings.Calendar.ICalUrl = "";
		}

		~SettingsManager()
		{
		}

		/// <summary>
		/// Registers new subscriber to the list of subscribers - when notify is called
		/// then all currently registered subscribers are called.
		/// </summary>
		/// <param name="subscriber">New subscriber that is registered.</param>
		public void Attach(SettingsSubscriber subscriber)
		{
			if(!Subscribers.Contains(subscriber))
            {
				Subscribers.Add(subscriber);
            }
		}

		/// <summary>
		/// Removes the subscriber from the list of subscribers - when notify is called
		/// then all currently registered subscribers are called.
		/// </summary>
		/// <param name="subscriber">Subscriber should be unregister, i.e. removed from the list of subscribers.</param>
		public void Detach(SettingsSubscriber subscriber)
		{
			if(Subscribers.Contains(subscriber))
            {
				Subscribers.Remove(subscriber);
            }
		}

		/// <summary>
		/// For all registered subscribers their Update() operation is called - used to
		/// notify the subscribers. This notify will be published to the subscribers when
		/// the settings where changed.
		/// </summary>
		public void Notify()
		{
			foreach(SettingsSubscriber subscriber in Subscribers)
            {
				subscriber.Update(this);
            }
		}

		/// <summary>
		/// Loads the current application settings.
		/// </summary>
		public void Load()
        {
			if (System.IO.File.Exists(SettingsFileName))
			{
				// load previous stored settings
				System.IO.TextReader reader = null;
				try
				{
					System.Xml.Serialization.XmlSerializer serializer = new System.Xml.Serialization.XmlSerializer(typeof(ApplicationSettings));
					reader = new System.IO.StreamReader(SettingsFileName);
					_settings = serializer.Deserialize(reader) as ApplicationSettings;
				}
				finally
				{
					if (reader != null)
					{
						reader.Close();
					}
				}
			}
		}

		/// <summary>
		/// Stores the current application settings.
		/// </summary>
		public void Store()
        {
			System.IO.TextWriter writer = null;
			try
			{
				System.Xml.Serialization.XmlSerializer serializer = new System.Xml.Serialization.XmlSerializer(typeof(ApplicationSettings));
				writer = new System.IO.StreamWriter(SettingsFileName);
				serializer.Serialize(writer, _settings);
			}
			finally
			{
				if (writer != null)
				{
					writer.Close();
				}
			}
		}
	}
}